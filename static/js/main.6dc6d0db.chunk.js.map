{"version":3,"sources":["posts sync /^/.//.*/.json$","components/Container.js","components/Post.js","components/PostLink.js","App.js","AppRouter.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Container","className","this","props","children","React","Component","Post","paragraphs","paragraph","i","key","href","rel","title","subtitle","renderBody","PostLink","containerStyle","paddingBottom","style","fontSize","fontWeight","letterSpacing","color","fontFamily","textDecoration","target","openInNewTab","text","App","posts","require","post","replace","renderPosts","AppRouter","postJson","path","routePosts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAAA,IAAIA,EAAM,CACT,oBAAqB,GACrB,kBAAmB,IAIpB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,8gDCVLY,G,6KARX,OACE,yBAAKC,UAAU,WACZC,KAAKC,MAAMC,c,GAJIC,IAAMC,YC4BfC,G,iLAxBX,OAAOL,KAAKC,MAAMK,WAAWvB,KAAI,SAACwB,EAAWC,GAAZ,OAC9B,yBAAKC,IAAKD,EAAGT,UAAU,aAAaQ,Q,+BAKvC,OACE,kBAAC,EAAD,KACE,0BAAMG,KAAK,qEAAqEC,IAAI,eACpF,0BAAMD,KAAK,8DAA8DC,IAAI,eAC7E,0BAAMD,KAAK,oEAAoEC,IAAI,eAEnF,uBAAGZ,UAAU,QAAQW,KAAK,aACvBV,KAAKC,MAAMW,OAEd,yBAAKb,UAAU,YACZC,KAAKC,MAAMY,UAEbb,KAAKc,kB,GArBKX,IAAMC,YC4BVW,G,kNAdbC,eAAiB,CACfC,cAAe,Q,EAGjBC,MAAQ,CACNC,SAAU,GACVC,WAAY,IACZC,cAAe,MACfC,MAAO,WACPC,WAAY,iBACZC,eAAgB,Q,uDAvBhB,OACE,yBAAKN,MAAOlB,KAAKgB,gBACf,uBACEE,MAAOlB,KAAKkB,MACZR,KAAMV,KAAKC,MAAMS,KACjBe,OAAQzB,KAAKC,MAAMyB,aAAe,SAAW,GAC7Cf,IAAI,uBACHX,KAAKC,MAAM0B,W,GAVCxB,IAAMC,YCsBdwB,E,4MAjBbC,MAAQC,EAAQ,IAAyBD,M,4DAGvC,OAAO7B,KAAK6B,MAAM9C,KAAI,SAACgD,GAAD,OACnB,kBAAC,EAAD,CAAUtB,IAAKsB,EAAMJ,KAAMI,EAAMrB,KAAI,qBAAgBqB,EAAKC,QAAQ,MAAM,Y,+BAK3E,OACE,kBAAC,EAAD,KACGhC,KAAKiC,mB,GAbI9B,IAAMC,WC4CT8B,E,4MAtCbL,MAAQC,EAAQ,IAAyBD,M,2DAGvC,OAAO7B,KAAK6B,MAAM9C,KAAI,SAACgD,GACrB,IAAII,EAAWL,MAAQ,YAAWC,EAAZ,UACtB,OACE,kBAAC,IAAD,CAAOtB,IAAKsB,EAAMK,KAAI,mBAAcL,EAAKC,QAAQ,MAAM,MACrD,kBAAC,EAAD,CACEpB,MAAOuB,EAASvB,MAChBC,SAAUsB,EAAStB,SACnBP,WAAY6B,EAAS7B,mB,+BAQ7B,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,2BAEON,KAAKqC,cAFZ,CAGI,kBAAC,IAAD,CAAOD,KAAK,gBAAgB3B,IAAI,SAC9B,kBAAC,EAAD,CAAMG,MAAM,QAAQC,SAAS,WAAWP,WAAY,MAEtD,kBAAC,IAAD,CAAO8B,KAAK,IAAI3B,IAAI,KAClB,kBAAC,EAAD,gB,GA9BQN,IAAMC,WCGVkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6dc6d0db.chunk.js","sourcesContent":["var map = {\n\t\"./2020.08.16.json\": 32,\n\t\"./registry.json\": 13\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 31;","import React from 'react';\nimport './Container.css';\n\nclass Container extends React.Component {\n  render() {\n    return (\n      <div className=\"Wrapper\">\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport Container from './Container';\nimport './Post.css';\n\nclass Post extends React.Component {\n\n  renderBody() {\n    return this.props.paragraphs.map((paragraph, i) =>\n      (<div key={i} className=\"Paragraph\">{paragraph}</div>)\n    )\n  }\n\n  render() {\n    return (\n      <Container>\n        <link href=\"https://fonts.googleapis.com/css2?family=Crimson+Text&display=swap\" rel=\"stylesheet\"></link>\n        <link href=\"https://fonts.googleapis.com/css2?family=Amiri&display=swap\" rel=\"stylesheet\"></link>\n        <link href=\"https://fonts.googleapis.com/css2?family=EB+Garamond&display=swap\" rel=\"stylesheet\"></link>\n\n        <a className=\"Title\" href=\"#/writing\">\n          {this.props.title}\n        </a>\n        <div className=\"Subtitle\">\n          {this.props.subtitle}\n        </div>\n        {this.renderBody()}\n      </Container>\n    )\n  }\n}\n\nexport default Post;","import React from 'react';\n\nclass PostLink extends React.Component {\n\n  render() {\n    return (\n      <div style={this.containerStyle}>\n        <a\n          style={this.style}\n          href={this.props.href}\n          target={this.props.openInNewTab ? \"_blank\" : \"\"}\n          rel=\"noopener noreferrer\">\n          {this.props.text}\n        </a>\n      </div>\n    )\n  }\n\n  containerStyle = {\n    paddingBottom: \"45px\",\n  }\n\n  style = {\n    fontSize: 32,\n    fontWeight: 500,\n    letterSpacing: \"1px\",\n    color: \"lavender\",\n    fontFamily: \"Helvetica Neue\",\n    textDecoration: \"None\",\n  }\n}\n\nexport default PostLink;","import React from 'react';\nimport './App.css';\nimport PostLink from './components/PostLink';\nimport Container from './components/Container';\n\nclass App extends React.Component {\n\n  posts = require('./posts/registry.json').posts;\n\n  renderPosts() {\n    return this.posts.map((post) =>\n      (<PostLink key={post} text={post} href={`/#/writing/${post.replace(/\\./g,\"\")}`} />)\n    )\n  }\n\n  render() {\n    return (\n      <Container>\n        {this.renderPosts()}\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Post from './components/Post';\nimport App from './App';\n\nclass AppRouter extends React.Component {\n\n  posts = require('./posts/registry.json').posts;\n\n  routePosts() {\n    return this.posts.map((post) => {\n      let postJson = require(`./posts/${post}.json`)\n      return (\n        <Route key={post} path={`/writing/${post.replace(/\\./g,\"\")}`}>\n          <Post\n            title={postJson.title}\n            subtitle={postJson.subtitle}\n            paragraphs={postJson.paragraphs}\n          />\n        </Route>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            {[\n              ...this.routePosts(),\n              <Route path=\"/writing/test\" key=\"/test\">\n                <Post title=\"Title\" subtitle=\"Subtitle\" paragraphs={[]} />\n              </Route>,\n              <Route path=\"/\" key=\"/\">\n                <App />\n              </Route>,\n            ]}\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppRouter from './AppRouter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}